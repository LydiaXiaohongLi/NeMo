trainer:
  num_nodes: 1
  devices: 8
  accelerator: gpu
  precision: bf16
  logger: False # logger provided by exp_manager
  enable_checkpointing: False
  replace_sampler_ddp: False
  max_epochs: 1
  log_every_n_steps: 1
  limit_val_batches: 0
  limit_test_batches: 0
  accumulate_grad_batches: 1
  gradient_clip_val: 1.0

exp_manager:
  explicit_log_dir: /dfs/models/exploration_pretraining/${exp_manager.wandb_logger_kwargs.project}-nemo
  exp_dir: null
  name: megatron_llama
  resume_if_exists: True
  resume_ignore_no_checkpoint: True
  create_checkpoint_callback: True
  checkpoint_callback_params:
    monitor: step
    save_top_k: 10
    mode: max
    always_save_nemo: False # saves nemo file during validation, not implemented for model parallel
    save_nemo_on_train_end: False # not recommended when training large models on clusters with short time limits
    filename: 'nemo_llama_13b_c4_pretrain-{step}-{consumed_samples}'
    model_parallel_size: ${multiply:${model.tensor_model_parallel_size}, ${model.pipeline_model_parallel_size}}
    every_n_train_steps: 100
    every_n_epochs: null
  log_step_timing: True
  step_timing_kwargs:
    sync_cuda: True
    buffer_size: 5
  create_wandb_logger: False
  wandb_logger_kwargs:
    project: llama-13b-c4-pretrain
    name: ${exp_manager.wandb_logger_kwargs.project}
    group: ${exp_manager.wandb_logger_kwargs.project}-nemo-${trainer.num_nodes}node-tp${model.tensor_model_parallel_size}-pp${model.pipeline_model_parallel_size}-sp${model.sequence_parallel}-gc${model.activations_checkpoint_granularity}${model.activations_checkpoint_method}-bs${model.global_batch_size}-mbs${model.micro_batch_size}-${model.normalization}-amp_02${model.megatron_amp_O2}-tf32True-${model.position_embedding_type}-${model.optim.name}
    job_type: exploration_memory_speed_profile
    config:
      tp: ${model.tensor_model_parallel_size}
      pp: ${model.pipeline_model_parallel_size}
      fp8: ${model.fp8}
      megatron_amp_O2: ${model.megatron_amp_O2}
      transformer_engine: ${model.transformer_engine}
      precision: ${trainer.precision}
      set_float32_matmul_precision: high
      xformers: true
      activations_checkpoint_granularity: ${model.activations_checkpoint_granularity}
      activations_checkpoint_method: ${model.activations_checkpoint_method}
      num_nodes: ${trainer.num_nodes}
      optimizer: ${model.optim.name}
      sequence_parallel: ${model.sequence_parallel}



model:
  # model parallelism: MBS=2, TPS=2, AGB=8 for 80GB nodes.
  micro_batch_size: 8
  global_batch_size: 2048
  tensor_model_parallel_size: 8
  pipeline_model_parallel_size: 1
  virtual_pipeline_model_parallel_size: null # interleaved pipeline
  resume_from_checkpoint: null # manually set the checkpoint file to load from

  # model architecture
  position_embedding_type: rope
  rotary_percentage: 1.0
  share_embeddings_and_output_weights: False
  bias: False
  activation: swiglu
  normalization: layernorm
  transformer_block_type: pre_ln
  encoder_seq_length: 2048
  max_position_embeddings: 2048
  num_layers: 40
  hidden_size: 5120
  ffn_hidden_size: 13824  # Transformer FFN hidden size. 4 * hidden_size.
  num_attention_heads: 40
  init_method_std: 0.02  # Standard deviation of the zero mean normal distribution used for weight initialization.')
  hidden_dropout: 0  # Dropout probability for hidden state transformer.
  attention_dropout: 0
  kv_channels: null  # Projection weights dimension in multi-head attention. Set to hidden_size // num_attention_heads if null
  apply_query_key_layer_scaling: False # scale Q * K^T by 1 / layer-number.
  layernorm_epsilon: 1e-6
  make_vocab_size_divisible_by: 128 # Pad the vocab size to be divisible by this value for computation efficiency.
  pre_process: True # add embedding
  post_process: True # add pooler
  persist_layer_norm: True # Use of persistent fused layer norm kernel.
  gradient_as_bucket_view: True # Allocate gradients in a contiguous bucket to save memory (less fragmentation and buffer memory)

  # Fusion
  grad_div_ar_fusion: True # Fuse grad division into torch.distributed.all_reduce
  gradient_accumulation_fusion: True # Fuse weight gradient accumulation to GEMMs
  masked_softmax_fusion: True # Use a kernel that fuses the attention softmax with it's mask.
  bias_activation_fusion: False
  bias_dropout_add_fusion: False

  ## Activation Checkpointing
  activations_checkpoint_granularity: selective # 'selective': only attention in decoder layers or 'full': all layers in decoder layers
  activations_checkpoint_method: uniform # 'uniform': checkpoint layer at uniformly internal, 'block': checkpoint all first few block layers
  activations_checkpoint_num_layers: 1
  num_micro_batches_with_partial_activation_checkpoints: null
  activations_checkpoint_layers_per_pipeline: null

  ## Sequence Parallelism
  sequence_parallel: True

  # precision
  native_amp_init_scale: 4294967296 # 2 ** 32
  native_amp_growth_interval: 1000
  hysteresis: 2 # Gradient scale hysteresis
  fp32_residual_connection: False # Move residual connections to fp32
  fp16_lm_cross_entropy: False # Move the cross entropy unreduced loss calculation for lm head to fp16

  # Megatron O2-style half-precision
  megatron_amp_O2: False # Enable O2-level automatic mixed precision using master parameters
  grad_allreduce_chunk_size_mb: 125

  ## Transformer Engine
  transformer_engine: False
  fp8: False # enables fp8 in TransformerLayer forward
  fp8_e4m3: False # sets fp8_format = recipe.Format.E4M3
  fp8_hybrid: False # sets fp8_format = recipe.Format.HYBRID
  fp8_margin: 0 # scaling margin
  fp8_interval: 1 # scaling update interval
  fp8_amax_history_len: 1 # Number of steps for which amax history is recorded per tensor
  fp8_amax_compute_algo: most_recent # 'most_recent' or 'max'. Algorithm for computing amax from history
  use_emha: False

  # miscellaneous
  seed: 1234
  sync_batch_comm: False
  use_cpu_initialization: False # Init weights on the CPU (slow for large models)
  onnx_safe: False # Use work-arounds for known problems with Torch ONNX exporter.
  apex_transformer_log_level: 30 # Python logging level displays logs with severity greater than or equal to this

  # Nsys profiling options
  nsys_profile:
    enabled: False
    trace: [nvtx,cuda]
    start_step: 10  # Global batch to start profiling
    end_step: 10 # Global batch to end profiling
    ranks: [0] # Global rank IDs to profile
    gen_shape: False # Generate model and kernel details including input shapes

  optim:
    name: sophia  # fused_adam
    lr: 3e-4
    weight_decay: 0.1
    betas:
    - 0.9
    - 0.95
    sched:
      name: CosineAnnealing
      warmup_steps: 2000
      min_lr: 3e-5
      max_steps: 50000

  hessian_update_interval: 10
  log_optimizer_state: False

  data:
    data_impl: mmap
    splits_string: "99990,8,2"
    seq_length: 2048
    skip_warmup: True
    num_workers: 0  # TODO multiple process doesnt work with memoryview, but single process (num_workers=0) or memoryview is a bit slower
    dataloader_type: single # cyclic
    reset_position_ids: False # Reset position ids after end-of-document token
    reset_attention_mask: False # Reset attention mask after end-of-document token
    eod_mask_loss: False # Mask loss for the end of document tokens
    index_mapping_dir: null # path to save index mapping .npy files, by default will save in the same location as data_prefix
    data_prefix: # Should be weight path weight path... for a blended dataset
      train:
      - /dfs/datasets/c4_en_tokenized/llama_tokenized_shard0_part0.mmap
      validation:
      - dfs/datasets/c4_en_tokenized/llama_tokenized_shard0_part0.mmap
      test:
      - dfs/datasets/c4_en_tokenized/llama_tokenized_shard0_part0.mmap